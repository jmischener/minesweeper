{"version":3,"sources":["types/types.tsx","reducers/boardReducer.tsx","store/store.tsx","utils/board-functions.tsx","components/Square/Square.tsx","actions/board.tsx","components/Board/Board.tsx","components/BoardData/BoardData.tsx","components/NewGameMenu/NewGameMenu.tsx","layouts/MineSweeper/MineSweeper.tsx","App.tsx","index.tsx"],"names":["eBoardState","eSquareState","types","initialState","board","squares","size","data","step","Clean","cantBombs","cantFlags","cantShow","reducers","combineReducers","game","state","action","type","payload","Lose","Win","store","createStore","loadFromStorage","composeWithDevTools","serializedData","localStorage","getItem","JSON","parse","error","subscribe","getState","InGame","setItem","stringify","removeItem","populateBoard","ret","Array","from","length","isBomb","Hidden","value","Error","i","number","Math","round","random","insertBomb","position","ShowAround","_data","_size","_count","_around","index","Show","around","Square","props","dispatch","useDispatch","useSelector","squareData","changeSquareValue","count","Flag","Question","updateBoard","className","onClick","event","onAuxClick","rightClick","style","fontSize","color","fillBox","Board","gridTemplateColumns","onMouseDown","e","preventDefault","onContextMenu","showTablero","BoardData","width","Alert","severity","renderMessage","NewGameMenu","useState","visibleNewDialog","setVisibleNewDialog","boardSize","setBoardSize","setCantBombs","disabled","setDisabled","useEffect","handleCloseDialog","Button","variant","Dialog","open","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","TextField","label","onChange","Number","parseInt","target","InputLabelProps","shrink","handleChangeCantBombs","DialogActions","newBoard","MineSweeper","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ba1a5161.chunk.js","sourcesContent":["export interface IGameData {\r\n  board: IBoard;\r\n  data: IBoardData;\r\n}\r\n\r\nexport interface IBoardData {\r\n  step: eBoardState;\r\n  cantBombs: number;\r\n  cantFlags: number;\r\n  cantShow: number;\r\n}\r\n\r\nexport interface IBoard {\r\n  squares: Array<iSquareData>;\r\n  size: number;\r\n}\r\n\r\nexport interface iSquareData {\r\n  isBomb: boolean;\r\n  state: eSquareState;\r\n  value: number;\r\n}\r\n\r\nexport enum eBoardState {\r\n  Clean = 0,\r\n  InGame = 1,\r\n  Lose = 2,\r\n  Win = 3,\r\n}\r\n\r\nexport enum eSquareState {\r\n  Hidden = 0,\r\n  Show = 1,\r\n  Flag = 2,\r\n  Question = 3,\r\n}\r\n\r\nexport type BoardState = {\r\n  board: IGameData;\r\n};\r\n\r\nexport const types = {\r\n  new: \"New Board\",\r\n  lose: \"The End\",\r\n  update: \"Update Board\",\r\n  win: \"The Champion\",\r\n  update1: \"Prueba\",\r\n};\r\n\r\nexport type RootState = {\r\n  game: IGameData;\r\n};\r\n","import { eBoardState, IGameData, types } from \"../types/types\";\r\n\r\nexport const boardReducer = (\r\n  state: IGameData = initialState(),\r\n  action: any\r\n): IGameData => {\r\n  switch (action.type) {\r\n    case types.new:\r\n      return {\r\n        ...state,\r\n        board: {\r\n          size: action.payload.board.size,\r\n          squares: [...action.payload.board.squares],\r\n        },\r\n        data: {\r\n          step: action.payload.data.step,\r\n          cantBombs: action.payload.data.cantBombs,\r\n          cantFlags: action.payload.data.cantFlags,\r\n          cantShow: action.payload.data.cantShow,\r\n        },\r\n      };\r\n\r\n    case types.lose:\r\n      return {\r\n        ...state,\r\n        board: {\r\n          squares: action.payload.board.squares,\r\n          size: state.board.size,\r\n        },\r\n        data: {\r\n          step: eBoardState.Lose,\r\n          cantBombs: state.data.cantBombs,\r\n          cantFlags: state.data.cantFlags,\r\n          cantShow: state.data.cantShow,\r\n        },\r\n      };\r\n\r\n    case types.win:\r\n      return {\r\n        ...state,\r\n        board: {\r\n          squares: action.payload.board.squares,\r\n          size: state.board.size,\r\n        },\r\n        data: {\r\n          step: eBoardState.Win,\r\n          cantBombs: action.payload.data.cantBombs,\r\n          cantFlags: action.payload.data.cantFlags,\r\n          cantShow: action.payload.data.cantShow,\r\n        },\r\n      };\r\n\r\n    case types.update:\r\n      return {\r\n        ...state,\r\n        board: {\r\n          squares: action.payload.board.squares,\r\n          size: state.board.size,\r\n        },\r\n        data: {\r\n          step: state.data.step,\r\n          cantBombs: action.payload.data.cantBombs,\r\n          cantFlags: action.payload.data.cantFlags,\r\n          cantShow: action.payload.data.cantShow,\r\n        },\r\n      };\r\n\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport const initialState = (): IGameData => {\r\n  return {\r\n    board: { squares: [], size: 0 },\r\n    data: {\r\n      step: eBoardState.Clean,\r\n      cantBombs: 0,\r\n      cantFlags: 0,\r\n      cantShow: 0,\r\n    },\r\n  };\r\n};\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { boardReducer, initialState } from \"../reducers/boardReducer\";\r\nimport { eBoardState } from \"../types/types\";\r\n\r\nconst reducers = combineReducers({ game: boardReducer });\r\n\r\nexport const store = createStore(\r\n  reducers,\r\n  loadFromStorage(),\r\n  composeWithDevTools()\r\n);\r\n\r\nstore.subscribe(saveInStorage);\r\n\r\nexport function loadFromStorage() {\r\n  try {\r\n    const serializedData = localStorage.getItem(\"minesweeper\");\r\n    if (serializedData === null) return { game: initialState() };\r\n    return JSON.parse(serializedData);\r\n  } catch (error) {\r\n    return initialState();\r\n  }\r\n}\r\n\r\nfunction saveInStorage() {\r\n  const state = store.getState();\r\n  switch (state.game.data.step) {\r\n    case eBoardState.Clean:\r\n    case eBoardState.InGame:\r\n      localStorage.setItem(\"minesweeper\", JSON.stringify(store.getState()));\r\n      break;\r\n    case eBoardState.Lose:\r\n    case eBoardState.Win:\r\n      localStorage.removeItem(\"minesweeper\");\r\n      break;\r\n  }\r\n  localStorage.setItem(\"minesweeper\", JSON.stringify(store.getState()));\r\n}\r\n","import { iSquareData, eSquareState } from \"../types/types\";\r\n\r\nexport const populateBoard = (\r\n  size: number,\r\n  cantBombs: number\r\n): Array<iSquareData> => {\r\n  let ret = Array.from(\r\n    { length: size * size },\r\n    () =>\r\n      ({ isBomb: false, state: eSquareState.Hidden, value: 0 } as iSquareData)\r\n  );\r\n  if (size <= 0 || cantBombs <= 0) {\r\n    throw new Error(\"Valores incorrectos\");\r\n  }\r\n  if (cantBombs > (size * size) / 2) {\r\n    throw new Error(\"Demasiadas bombas\");\r\n  }\r\n  for (let i = 0; i < cantBombs; i++) {\r\n    const number = Math.round(Math.random() * (size * size - 1));\r\n    ret[number].isBomb ? i-- : insertBomb(ret, size, number);\r\n  }\r\n\r\n  return ret;\r\n};\r\n\r\nconst insertBomb = (\r\n  data: Array<iSquareData>,\r\n  size: number,\r\n  position: number\r\n) => {\r\n  const elem: iSquareData = data[position];\r\n  elem.isBomb = true;\r\n\r\n  //top\r\n  if (position >= size) {\r\n    data[position - size].value++;\r\n    if ((position - size) % size !== 0) data[position - size - 1].value++;\r\n    if ((position - size) % size !== size - 1)\r\n      data[position - size + 1].value++;\r\n  }\r\n\r\n  // left / right\r\n  if (position % size !== 0) data[position - 1].value++;\r\n  if (position % size !== size - 1) data[position + 1].value++;\r\n\r\n  // bottom\r\n  if (position + size < size * size) {\r\n    data[position + size].value++;\r\n    if ((position + size) % size !== 0) data[position + size - 1].value++;\r\n    if ((position + size) % size !== size - 1)\r\n      data[position + size + 1].value++;\r\n  }\r\n};\r\n\r\nexport const ShowAround = (function () {\r\n  let _data: Array<iSquareData> = [];\r\n  let _size: number = 0;\r\n  let _count: number = 0;\r\n\r\n  function _setBoard(\r\n    data: Array<iSquareData>,\r\n    size: number,\r\n    index: number\r\n  ): number {\r\n    _data = data;\r\n    _size = size;\r\n    _count = 0;\r\n\r\n    _around(index);\r\n\r\n    return _count;\r\n  }\r\n  function _around(index: number) {\r\n    // si ya estaba visible, finaliza recursiva\r\n    if (_data[index].state !== eSquareState.Hidden) return;\r\n\r\n    // muestra square\r\n    _data[index].state = eSquareState.Show;\r\n    _count++;\r\n\r\n    // si el valor es distinto a cero, finaliza recursiva\r\n    if (_data[index].value !== 0) return;\r\n\r\n    //top\r\n    if (index >= _size) {\r\n      _around(index - _size);\r\n      if ((index - _size) % _size !== 0) _around(index - _size - 1);\r\n      if ((index - _size) % _size !== _size - 1) _around(index - _size + 1);\r\n    }\r\n\r\n    // left / right\r\n    if (index % _size !== 0) _around(index - 1);\r\n    if (index % _size !== _size - 1) _around(index + 1);\r\n\r\n    // bottom\r\n    if (index + _size < _size * _size) {\r\n      _around(index + _size);\r\n      if ((index + _size) % _size !== 0) _around(index + _size - 1);\r\n      if ((index + _size) % _size !== _size - 1) _around(index + _size + 1);\r\n    }\r\n  }\r\n  return { around: _setBoard };\r\n})();\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateBoard } from \"../../actions/board\";\r\nimport {\r\n  iSquareData,\r\n  eSquareState,\r\n  eBoardState,\r\n  RootState,\r\n} from \"../../types/types\";\r\nimport FlagIcon from \"@material-ui/icons/Flag\";\r\nimport BugReportIcon from \"@material-ui/icons/BugReport\";\r\n\r\nimport \"./style.scss\";\r\n\r\ninterface SquareProps {\r\n  index: number;\r\n}\r\n\r\nconst Square: React.FunctionComponent<SquareProps> = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { index } = props;\r\n\r\n  const step = useSelector<RootState, eBoardState>(\r\n    (state) => state.game.data.step\r\n  );\r\n\r\n  const squareData = useSelector<RootState, iSquareData>(\r\n    (state) => state.game.board.squares[index]\r\n  );\r\n\r\n  const changeSquareValue = (value: eSquareState) => {\r\n    dispatch(updateBoard(index, value));\r\n  };\r\n\r\n  const fillBox = () => {\r\n    switch (squareData.state) {\r\n      case eSquareState.Flag:\r\n        return <FlagIcon style={{ fontSize: 25 }} color=\"secondary\" />;\r\n      case eSquareState.Question:\r\n        return <span>?</span>;\r\n      case eSquareState.Show:\r\n        if (squareData.isBomb) {\r\n          return <BugReportIcon style={{ fontSize: 25 }} />;\r\n        } else {\r\n          if (squareData.value === 0) return <span>&nbsp;</span>;\r\n          return (\r\n            <span className={`value${squareData.value}`}>\r\n              {squareData.value}\r\n            </span>\r\n          );\r\n        }\r\n      default:\r\n        return <span>&nbsp;</span>;\r\n    }\r\n  };\r\n\r\n  function leftClick() {\r\n    if (\r\n      step === eBoardState.InGame &&\r\n      squareData.state !== eSquareState.Show &&\r\n      squareData.state !== eSquareState.Flag\r\n    )\r\n      changeSquareValue(eSquareState.Show);\r\n  }\r\n\r\n  function rightClick() {\r\n    if (step === eBoardState.InGame) {\r\n      switch (squareData.state) {\r\n        case eSquareState.Flag:\r\n          changeSquareValue(eSquareState.Question);\r\n          break;\r\n        case eSquareState.Question:\r\n          changeSquareValue(eSquareState.Hidden);\r\n          break;\r\n        case eSquareState.Hidden:\r\n          changeSquareValue(eSquareState.Flag);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`box${squareData.state} ${\r\n        step === eBoardState.InGame && squareData.state !== eSquareState.Show\r\n          ? \"enabled\"\r\n          : \"\"\r\n      }`}\r\n      onClick={(event: React.MouseEvent<HTMLDivElement>) => {\r\n        leftClick();\r\n      }}\r\n      onAuxClick={(event: React.MouseEvent<HTMLDivElement>) => {\r\n        rightClick();\r\n      }}\r\n    >\r\n      {fillBox()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import { loadFromStorage } from \"../store/store\";\r\nimport { eBoardState, eSquareState, IGameData, types } from \"../types/types\";\r\nimport { populateBoard, ShowAround } from \"../utils/board-functions\";\r\n\r\nexport const newBoard = (size: number, cantBombs: number) => ({\r\n  type: types.new,\r\n  payload: {\r\n    board: { size: size, squares: [...populateBoard(size, cantBombs)] },\r\n    data: {\r\n      step: eBoardState.InGame,\r\n      cantBombs: cantBombs,\r\n      cantFlags: 0,\r\n      cantShow: size * size - cantBombs,\r\n    },\r\n  } as IGameData,\r\n});\r\n\r\nexport const updateBoard = (index: number, state: eSquareState) => {\r\n  const game = loadFromStorage().game;\r\n  const squares = game.board.squares;\r\n  const data = game.data;\r\n\r\n  // lost\r\n  if (state === eSquareState.Show && squares[index].isBomb) {\r\n    squares[index].state = state;\r\n    return {\r\n      type: types.lose,\r\n      payload: { board: { squares: squares }, data: data },\r\n    };\r\n  }\r\n\r\n  // in game\r\n  switch (state) {\r\n    case eSquareState.Show:\r\n      let count = 0;\r\n\r\n      count = ShowAround.around(squares, game.board.size, index);\r\n      data.cantShow -= count;\r\n      break;\r\n\r\n    case eSquareState.Flag:\r\n      data.cantFlags += 1;\r\n      squares[index].state = state;\r\n      break;\r\n\r\n    case eSquareState.Hidden:\r\n    case eSquareState.Question:\r\n      squares[index].state = state;\r\n      break;\r\n  }\r\n\r\n  // win\r\n  if (data.cantShow === 0) {\r\n    return {\r\n      type: types.win,\r\n      payload: { board: { squares: squares }, data: data },\r\n    };\r\n  }\r\n\r\n  return {\r\n    type: types.update,\r\n    payload: {\r\n      board: { squares: squares },\r\n      data: data,\r\n    },\r\n  };\r\n};\r\n","import React, { ReactNode } from \"react\";\r\nimport Square from \"../Square/Square\";\r\nimport \"./style.scss\";\r\n\r\ninterface BoardProps {\r\n  size: number;\r\n}\r\n\r\nconst Board: React.FunctionComponent<BoardProps> = (props) => {\r\n  const { size } = props;\r\n\r\n  const showTablero = () => {\r\n    let ret = new Array<ReactNode>(size * size);\r\n    for (let i = 0; i < ret.length; i++) {\r\n      ret[i] = <Square key={i} index={i} />;\r\n    }\r\n\r\n    return ret;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"board\"\r\n      style={{\r\n        gridTemplateColumns: `repeat(${size}, 30px)`,\r\n      }}\r\n      onMouseDown={(e) => e.preventDefault()}\r\n      onContextMenu={(e) => e.preventDefault()}\r\n    >\r\n      {size > 0 && showTablero()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport { eBoardState, IBoardData, RootState } from \"../../types/types\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nimport \"./style.scss\";\r\n\r\ninterface BoardDataProps {\r\n  size: number;\r\n}\r\nexport const BoardData: React.FunctionComponent<BoardDataProps> = (props) => {\r\n  const data = useSelector<RootState, IBoardData>((state) => state.game.data);\r\n\r\n  const renderMessage = () => {\r\n    switch (data.step) {\r\n      case eBoardState.Lose:\r\n        return <Alert severity=\"error\">Perdiste!</Alert>;\r\n      case eBoardState.Win:\r\n        return <Alert severity=\"success\">Ganaste!</Alert>;\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: props.size * 30 + 2 }}>\r\n      <div>{renderMessage()}</div>\r\n      <div>\r\n        {data.step !== eBoardState.Clean && (\r\n          <Alert severity=\"info\">\r\n            {`Cantidad Bombas:${data.cantBombs - data.cantFlags}`}\r\n          </Alert>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport React, { FunctionComponent, useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { newBoard } from \"../../actions/board\";\r\n\r\nimport \"./style.scss\";\r\n\r\nexport const NewGameMenu: FunctionComponent = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [visibleNewDialog, setVisibleNewDialog] = useState<boolean>(false);\r\n  const [boardSize, setBoardSize] = useState<number>(0);\r\n  const [cantBombs, setCantBombs] = useState<number>(0);\r\n  const [disabled, setDisabled] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      boardSize > 0 &&\r\n      cantBombs > 0 &&\r\n      cantBombs <= (boardSize * boardSize) / 2\r\n    )\r\n      setDisabled(false);\r\n    else setDisabled(true);\r\n  }, [boardSize, cantBombs]);\r\n\r\n  const handleClickNewGame = () => {\r\n    setVisibleNewDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setVisibleNewDialog(false);\r\n  };\r\n\r\n  const handleChangeBoardSize = (\r\n    e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\r\n  ) => {\r\n    const size: number = Number.parseInt(e.target.value);\r\n    setBoardSize(size);\r\n  };\r\n\r\n  const handleChangeCantBombs = (\r\n    e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\r\n  ) => {\r\n    setCantBombs(Number.parseInt(e.target.value));\r\n  };\r\n\r\n  const handleInitNewGame = () => {\r\n    dispatch(newBoard(boardSize, cantBombs));\r\n    setVisibleNewDialog(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"root\">\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickNewGame}>\r\n        Nueva Partida!\r\n      </Button>\r\n\r\n      <Dialog\r\n        open={visibleNewDialog}\r\n        onClose={handleCloseDialog}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">Nueva Partida</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Defina el tamaño del tablero y la cantidad de bombas\r\n          </DialogContentText>\r\n          <TextField\r\n            id=\"boardSize\"\r\n            label=\"Tamaño Tablero\"\r\n            type=\"number\"\r\n            onChange={handleChangeBoardSize}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n          />\r\n          <TextField\r\n            id=\"cantBombs\"\r\n            label=\"Cantidad Bombas\"\r\n            type=\"number\"\r\n            onChange={(e) => {\r\n              handleChangeCantBombs(e);\r\n            }}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDialog} color=\"primary\">\r\n            Cancelar\r\n          </Button>\r\n          <Button\r\n            onClick={handleInitNewGame}\r\n            color=\"primary\"\r\n            disabled={disabled}\r\n          >\r\n            Iniciar\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n","import { FunctionComponent } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Board from \"../../components/Board/Board\";\r\nimport { BoardData } from \"../../components/BoardData/BoardData\";\r\nimport { NewGameMenu } from \"../../components/NewGameMenu/NewGameMenu\";\r\nimport { IBoard, RootState } from \"../../types/types\";\r\n\r\nimport \"./style.scss\";\r\n\r\nexport const MineSweeper: FunctionComponent = () => {\r\n  const board = useSelector<RootState, IBoard>((state) => state.game.board);\r\n\r\n  return (\r\n    <div>\r\n      <NewGameMenu />\r\n      <BoardData size={board.size} />\r\n      <Board size={board.size} />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { MineSweeper } from \"./layouts/MineSweeper/MineSweeper\";\nimport { store } from \"./store/store\";\n\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <MineSweeper />\n    </Provider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals())\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}